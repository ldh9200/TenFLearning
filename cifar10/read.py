
# -*- coding: euc-kr -*- 
'''
Created on 2018. 4. 22.

@author: ldh92
'''
import tensorflow as tf

import os
import matplotlib.pyplot as plt  #이미지DUMP용 

'''
   Cifar10.py 를 통해 다운받은 파일 이미지와 라벨확인 
'''
def readCifar10File():
    FLAGS = tf.app.flags.FLAGS

    #파일은 다운 받았다 치고
    tf.app.flags.DEFINE_integer('batch_size'    , 128, """Number of images to process in a batch.""")
    tf.app.flags.DEFINE_string('data_dir'       , '/tmp/cifar10_data',"""Path to the CIFAR-10 data directory.""")
    tf.app.flags.DEFINE_boolean('use_fp16'  , False,"""Train the model using fp16.""")

    print( "data_dir" , FLAGS.data_dir)
    print( "batch_size" , FLAGS.batch_size)
    data_dir = os.path.join(FLAGS.data_dir, 'cifar-10-batches-bin')
    print( "data_dir" , data_dir)
    
    label_bytes = 1  # 2 for CIFAR-100
    height = 32
    width = 32
    depth = 3
    image_bytes = height * width * depth

    #읽어들일 목록구성 Queue Runner ,  Default shuffle true
    filenames = [os.path.join(data_dir, 'data_batch_%d.bin' % i) for i in range(1, 6)]    
   #filenames = ['C:\\Users\ldh92\\.keras\datasets\\cifar-10-batches-py\\data_batch_1']
    print(filenames )

    filename_queue = tf.train.string_input_producer(filenames)

    # 읽어야 하는 라인당 사이즈
    record_bytes = label_bytes + image_bytes
   
    #데이타 읽기  FixedLengthRecordReader
    reader = tf.FixedLengthRecordReader(record_bytes=record_bytes)
    # filename_queue[] 데이타 읽기 
    key, value = reader.read(filename_queue)
    # value  tf.uint8 으로 변환
    record_bytes = tf.decode_raw(value , tf.uint8)
    #첫자리 라벨분리 
    label = tf.cast( tf.strided_slice(record_bytes, [0], [label_bytes]), tf.int32)
  
  
    depth_major = tf.reshape(

      tf.strided_slice(record_bytes, [label_bytes],

                       [label_bytes + image_bytes]),

      [depth, height, width]
      
      #[height, width, depth]
      )

  # Convert from [depth, height, width] to [height, width, depth].

    uint8image = tf.transpose(depth_major, [1, 2, 0])
  
    fig ,ax=  plt.subplots(10, 10, figsize=(10, 10)) 
    
    with tf.Session() as sess :
        coord = tf.train.Coordinator()
        threads = tf.train.start_queue_runners(sess =sess , coord =coord)
        for i in range(10):  
             for j in range(10): 
                 print(sess.run(depth_major)) 
                 vl,vk,vv ,img= sess.run([label , key ,value ,uint8image])
                 ax[i][j].set_axis_off() 
                 ax[i][j].imshow(img) 
                 ax[i][j].annotate(str(vl) + str(i) + "," + str(j), xy=(0, 0), xytext=(0, -1), arrowprops=None, fontsize=6)
        coord.request_stop()
        coord.join(threads)
        plt.show()
        


'''
   keras datasets.cifar10 를 통해 다운받은 파일 이미지와 라벨확인 
'''
def readCifar10Keras():

   
    import numpy as np
    from tensorflow.python.keras._impl.keras.datasets.cifar10 import load_data
    from tensorflow.python.keras._impl.keras.utils.data_utils import get_file

    dirname = 'cifar-10-batches-py'
    origin = 'https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz'
    path = get_file(dirname, origin=origin, untar=True)
    print(path)
    (x_train, y_train), (x_test, y_test) = load_data()
    
    fig ,ax=  plt.subplots(10, 10, figsize=(10, 10))     
    index =0
    for i in  range(10) :
        for j in range(10):
            ax[i][j].imshow(x_train[index]) 
            ax[i][j].annotate(str(y_train[index]) + str(i) + "," + str(j), xy=(0, 0), xytext=(0, -1), arrowprops=None, fontsize=8)
            index+=1
         
    plt.show()


def DecodeRaw():
     
     a ='\x00\xb3\xb2\xb8\x9d\x83|qsxx\x7f\x8d\x8e\x82\x95\xad\x9f\x86\xa0\xb1\xbf\xb6\xa9\xb4\xaf\x9e\xc0\xbb\xa5\xa1\x9a\xa1\xb5\xb2\xb3\xb3\xb2\xa9\x8bxyuuz\x83\x90\x84\x85\x80w|\x82\xb0\xb7\xa7\xbe\xcc\xb3\xc2\xd0\xd0\xcc\xbb\xaf\x9c\xa7\xb3\xbf\xd3\xcc\xc1\xac\x9e\x7f{\x82\x99\xc5\xac\xa7\xac\x8b\x87\x8a\xa7\xb6\xb7\xcb\xce\xbd\xb0\xbb\xc8\xc3\xaf\x9d\x95\xa4\xa2\xb0\xcd\xc9\xb9\xb9\xbb\x9e\xb1\xa8\xa5\xca\xc7\xc6\xd3\xbc\xbe\xbd\xbe\xc0\xb4\xbc\xc4\xc9\xb9\xa5\x9d\x98\x8c\x86\x8c\x94\x8f\x98\xac\xae\x9f\xa9\xb1\x9f\xa6\xa6\xa2\xa6\xac\xb6\xc2\xc8\xc5\xc1\xbe\xbe\xb1\xaa\xb5\xc8\xba\x9f\x90\x93\x9f\x9d\x86\x87\x89\x8a\x8e\x91\x99\xa9\xb1\xa9\xa7\xa9\xb1\xae\xb3\xbd\xc5\xc7\xc2\xaf\xa6\xaa\xa9\xa7\xb1\xc6\xc3\xb1\xa7\xae\xb7\xc5\x82\x82\x84\x85\x86\x8a\x97\xa8\xb2\xaf\xb3\xbb\xbd\xc4\xca\xcd\xd2\xce\xd1\xc1\xbb\xc0\xc0\xbb\xbd\xc5\xc8\xc0\xbb\xb8\xb7\xc6\x8d\x88\x87\x89\x8d\x92\x97\x9d\x9d\x9f\x92\xa4\xa9\xaf\xb2\xb3\xbe\xc7\xcc\xc1\xc1\xc4\xc9\xc2\xc3\xc3\xc5\xba\xac\xac\xb2\xaf\xaa\x9a\x99\x99\x9f\xa8\xa6\x9f\x94\x8c^\x82\xa0\xa1\xa2\xa1\xa8\xb3\xb7\xb2\xb0\xb5\xc1\xb3\xb0\xb4\xb5\xa9\xa0\xa0\x9f\x9c\xac\xa4\xa8\xa5\xa2\xa9\xab\xa6\x9a\x8eVl\xa1\xa3\xa8\xae\xb2\xb3\xac\xa7\xa9\xac\xae\xa9\xa7\xa8\xa6\xa3\xa2\xa0\x9e\x9b\xa2\xa0\x9f\x9c\x9c\xa1\x9f\x9e\x9b\x9aeb\xa2\xa4\xa8\xa9\xa9\xab\xa6\xa4\xa7\xa7\xa6\xa5\xa6\xa8\xa6\xa4\xa5\xa5\xa5\xa4\x9d\x9c\x9b\x9b\x9e\x9d\x9b\x9c\x9c\x9esW\x9c\xa8\xac\x9bu\xa3\xa8\xa9\xa9\xab\xaa\xa8\xab\xb1\xae\xaa\xab\xaf\xa7\xa4\x8buo\x92\x92\x92\x92\x94\x95\x9auO\x87\x98xUImv\xa3\xa9\xa6\x9e\xa4\x97j\x86\xa3\x98\x97`Hznivxvwz}\x7faEac3\'Yjh\x83\x89~szlN^p\\T;/\x93\x8crs\x8c\x8c\x89\x8a\x8b\x8dp9LC&)Dap\x7f}~}{w}{wywsm\x8f\x81MC`jq|\x85\x8d{8737BNWc\x80\x91\x94\x90\x8c\x87\x84\x82\x7fywgg\x8e|chK\'*9CKO.%.>FDBWUmjd_\\ZXYX]WV\x9d\x9a\x9d\x9fzF;2#\x1b\x1f\x19\x18\x0c\x0c\r\x10"=\'\'3<H[jpz\x86\x90\x93u\xa8\xa7\xa9\xaa\xa7\xa3\x9f\x9a\x93\x8eyB>[QMUSoVV\x7f\x89\x8f\x92\x93\x92\x93\x90\x91\x94{\xa2\x9f\xa1\xa4\xa4\xa5\xa8\xaa\xae\xb0\xb6aM\xa4\xa1\xa2\x9cy\xabu_\xa4\xa2\xa0\x9d\x9b\x98\x97\x93\x91\x94{\x92\x8c\x87\x83\x80|ywqkm<*DBLr}\x98i]\xa7\xa3\xa5\xa5\xa5\xa4\xa1\x9f\x9f\xa0\x7f\xb3\xae\xaf\xb0\xad\xa9\xa0\x7fC0/4?Pbq}\x82\x81{z\x89\x8b\x8d\x8d\x8e\x90\x86\x88\xaa\xacs\xad\x9a\x91\x8a\x8a\x8f\x81T6Aa\x80\x97\xaa\xb5\xb6\xb4\xb1\xae\xae\xac\xaa\xa8\xa9\xa9\xa9\xac\xaa\xaa\xb4\xb3\x87\x98\x8a\x84\x80\x88\x90\x8c\x8b\x89\x8d\x94\x95\x97\xa5\xb9\xba\xbb\xbb\xbb\xba\xb7\xb3\xb1\xaf\xaf\xac\xaa\xae\xb0\xae\xaf\x94\xb1\xb3\xb8\xbb\xbd\xbf\xc0\xc0\xbf\xbc\xb6\xb3\xb1\xb4\xba\xba\xbc\xbc\xbc\xbb\xb9\xb7\xb6\xb6\xb6\xb4\xb0\xae\xad\xaa\xa9\xa0\xb9\xb8\xb9\xb9\xba\xbb\xbc\xbc\xbc\xbc\xb9\xb6\xb5\xb5\xb7\xb7\xb7\xb7\xb6\xb6\xb6\xb5\xb4\xb3\xb2\xb3\xb3\xb2\xb3\xb0\xa7\x9c\xbd\xbd\xbd\xbb\xba\xbb\xbb\xbb\xbd\xbe\xbe\xbd\xbc\xbb\xba\xba\xb8\xb7\xb4\xb1\xb0\xb0\xb1\xb2\xb3\xb2\xb2\xa7\x8eybO\xb1\xb3\xba\xbc\xbd\xbe\xbd\xbd\xbe\xbe\xbe\xbf\xc0\xbf\xbe\xbb\xba\xb9\xb7\xb6\xb6\xb6\xb6\xb8\xb9\xb8\xba\xad\x97\x84jM\xba\xb4\xb5\xb4\xbb\xc2\xc4\xc3\xc2\xc0\xbe\xbe\xc0\xbf\xc0\xc0\xbf\xbe\xbe\xbe\xbf\xbf\xbf\xbe\xbf\xb9\xa9\x96y[E3\xc5\xc3\xc3\xbe\xb7\xb3\xb9\xba\xc0\xc3\xc3\xc0\xc0\xbf\xbf\xbf\xc0\xc0\xc0\xbf\xbe\xbe\xbe\xbe\xa2sS?61,)\xc3\xc1\xc3\xc5\xc3\xbe\xb8\xb2\xb1\xb8\xc1\xc2\xc4\xc4\xc3\xc1\xc0\xbf\xbe\xbc\xbd\xbd\xbc\xbd\xb0\x95}fTE;5\xc5\xc2\xc4\xc5\xc3\xc5\xc4\xc3\xb9\xb2\xb3\xb3\xb9\xbe\xc2\xc3\xc3\xc2\xc0\xc0\xbe\xbe\xbd\xbd\xc2\xc8\xc8\xc1\xab\x91v\\\xcb\xc7\xcc\xc0\xb2\xb0\xb1\xb3\xb3\xb4\xb5\xc1\xc7\xba\xc4\xcd\xc7\xbb\xc6\xd1\xd6\xd2\xcd\xd9\xd7\xc6\xdf\xdc\xd0\xcb\xc4\xc9\xc6\xc1\xc5\xcd\xd1\xcc\xc0\xb3\xb3\xb6\xb6\xb6\xb9\xc3\xbc\xb9\xbb\xb8\xb9\xba\xcf\xd4\xc4\xd2\xe1\xc9\xd0\xe1\xe4\xe2\xd9\xd3\xb2\xb8\xc5\xcf\xe0\xdc\xd8\xc8\xc7\xba\xbd\xbb\xc1\xe0\xcf\xcc\xd2\xc1\xbf\xc2\xca\xcf\xcf\xdb\xde\xd1\xc3\xd5\xdd\xd9\xcf\xc7\xb3\xb7\xb6\xc2\xda\xd9\xcc\xcd\xd6\xc2\xd1\xc6\xbc\xd6\xd8\xd9\xe1\xd6\xd5\xd7\xd4\xd2\xca\xcf\xd5\xd8\xd0\xcb\xc9\xc5\xbf\xbe\xaa\xaa\xa2\xaf\xc2\xc7\xb8\xbf\xc8\xb9\xb9\xb7\xb3\xb6\xbd\xc7\xd3\xd6\xd3\xd4\xd4\xd5\xca\xc4\xcc\xda\xd7\xcb\xc5\xc5\xca\xc9\xb3\xaf\xae\xb2\xb7\xba\xbd\xc4\xc6\xbe\xb7\xb8\xc2\xc1\xc4\xce\xd7\xd9\xd9\xcd\xc9\xce\xcb\xc8\xca\xd5\xd8\xd1\xcd\xd0\xd1\xde\xba\xba\xbc\xbe\xbe\xc0\xc4\xc8\xc7\xc0\xc2\xca\xce\xd6\xdc\xdf\xe4\xdc\xe2\xdb\xda\xde\xdb\xd2\xd0\xd3\xd6\xd5\xd4\xce\xc8\xd6\xbc\xbb\xbd\xc0\xc0\xc1\xc1\xbf\xb5\xb5\xa8\xb9\xba\xbe\xc3\xc5\xcf\xd4\xd8\xd0\xd1\xd3\xd8\xd0\xd3\xd4\xd7\xd5\xcc\xca\xce\xc9\xc9\xc0\xc2\xc2\xc3\xc7\xc8\xc0\xaf\xa8\x81\x9e\xb1\xb1\xb4\xb3\xbb\xc6\xca\xc5\xc0\xc4\xd4\xc7\xc6\xcd\xd1\xce\xcc\xcb\xc9\xc7\xc1\xbc\xc2\xbe\xba\xc0\xc3\xbf\xb2\xa8\x81\x90\xb4\xb9\xbf\xc6\xca\xca\xc9\xc7\xc5\xc7\xcb\xca\xc8\xcb\xcb\xcb\xcc\xcb\xca\xc8\xb4\xb4\xb5\xb1\xb2\xb6\xb4\xb2\xaf\xb0\x89\x89\xbc\xc0\xc3\xc4\xc4\xc8\xc8\xc8\xc9\xc8\xca\xcb\xcb\xcd\xcc\xcb\xcb\xca\xca\xc8\xb3\xb5\xb6\xb6\xb8\xb7\xb4\xb3\xb4\xb4\x8e\x7f\xb9\xc4\xc9\xb8\x92\xc3\xc9\xc9\xc9\xcb\xcc\xcc\xcc\xcf\xcf\xcc\xcb\xcc\xc2\xbd\x99\x85\x81\xa3\xa3\xa3\xa1\xa1\xa2\xa5\x8av\x9e\xa9\x90mb\x86\x89\xb4\xbd\xba\xb5\xbd\xaf\x7f\x9e\xbd\xb3\xafrXxqpzwvvwy{ok|zPEr\x82y\x86\x8b\x83y\x81tUfyg^C9\x90\x8f\x83\x83\x8c\x8a\x8a\x87\x85\x84v]vta`m\x87\x93\x81xzzzswupnjll\x90\x89ebu~\x88\x8d\x8f\x91\x88_ehloonv\x83\x90\x8e\x8e\x8f\x8f\x8f\x8c\x8a\x88\x84xx\x93\x89v|gOTZ]^f[Xcfga[ji\x81}{xvsqrswss\xa2\xa1\xa1\xa3\x89`XJ8,6<9654>WaRR[bktz\x82\x8b\x8e\x91\x95\x7f\xad\xaa\xaa\xaa\xa9\xa6\xa3\x9f\x9b\x95\x81NHj_\\jk{hh\x8b\x91\x93\x95\x96\x95\x97\x98\x96\x97}\xa5\xa7\xa9\xaa\xab\xab\xaa\xac\xb3\xb6\xb8eU\xac\xa7\xa8\xa2\x7f\xb0ze\xaa\xa9\xa6\xa2\x9f\x9c\x9b\x9a\x97\x98x\x95\x93\x91\x8e\x8b\x87\x82~{vvF6PLV}\x87\xa2rg\xb1\xae\xb0\xaf\xaf\xad\xab\xa7\xa4\xa3~\xb7\xb5\xb7\xb4\xb1\xac\xaa\x8cQ?=AK[lz\x88\x8c\x8b\x85\x84\x93\x95\x97\x98\x9a\x9c\x91\x92\xb0\xb1u\xb0\xa1\x99\x91\x91\x95\x8deHTo\x8b\xa0\xb1\xbb\xbd\xbb\xb7\xb4\xb4\xb3\xb0\xaf\xb0\xb1\xb2\xb5\xb4\xb5\xbd\xba\x8d\x9c\x8f\x8b\x89\x91\x99\x96\x96\x95\x99\xa0\xa0\xa0\xab\xbd\xbe\xc0\xc0\xbf\xbf\xbb\xb8\xb5\xb4\xb4\xb2\xb0\xb4\xb5\xb4\xb6\x9b\xb5\xb7\xbd\xc0\xc2\xc4\xc4\xc5\xc3\xc2\xc0\xbd\xbc\xbc\xbf\xbf\xc1\xc1\xc1\xc0\xbe\xbc\xbb\xbb\xbb\xb9\xb5\xb2\xaf\xae\xb0\xa9\xbe\xbc\xbe\xbe\xbf\xc0\xc1\xc1\xc1\xc1\xc0\xbf\xbe\xbc\xbc\xbc\xbc\xbc\xbb\xbb\xbb\xba\xb9\xb8\xb7\xb8\xb8\xb7\xb8\xb5\xaf\xa6\xc2\xc2\xc2\xc0\xbf\xc0\xc0\xc0\xc2\xc3\xc4\xc3\xc2\xc0\xbf\xbf\xbd\xbc\xb9\xb6\xb5\xb5\xb6\xb7\xb8\xb7\xb7\xac\x94\x80kZ\xb6\xb8\xbe\xc1\xc2\xc3\xc2\xc2\xc3\xc3\xc3\xc4\xc5\xc4\xc3\xc0\xbf\xbe\xbc\xbb\xbb\xbb\xbb\xbd\xbe\xbd\xbf\xb2\x9e\x8dtY\xbd\xb7\xb8\xb7\xbe\xc5\xc8\xc8\xc7\xc5\xc3\xc3\xc5\xc4\xc5\xc5\xc4\xc3\xc3\xc3\xc4\xc4\xc4\xc3\xc2\xbc\xb1\xa1\x86jUD\xc7\xc5\xc5\xc0\xb9\xb5\xbc\xbf\xc5\xc8\xc8\xc5\xc5\xc4\xc4\xc4\xc5\xc5\xc5\xc4\xc3\xc3\xc3\xc3\xa9\x80eTICA?\xc5\xc3\xc5\xc7\xc5\xbf\xbc\xb7\xb6\xbd\xc6\xc7\xc9\xc9\xc8\xc6\xc5\xc4\xc3\xc1\xc2\xc2\xc1\xc2\xb8\xa2\x8dxdVNJ\xc7\xc4\xc6\xc7\xc5\xc7\xc8\xc8\xbe\xb7\xb8\xb8\xbe\xc3\xc7\xc8\xc8\xc7\xc5\xc5\xc3\xc3\xc2\xc2\xc6\xca\xca\xc4\xb4\x9d\x84k\xd8\xd2\xd8\xd3\xd2\xd7\xe0\xe4\xe0\xe0\xdd\xe1\xed\xe4\xe4\xe2\xe3\xde\xdd\xe3\xdf\xde\xe1\xef\xf0\xdf\xf3\xed\xeb\xe6\xe0\xe3\xd0\xcb\xce\xd9\xe1\xdf\xdd\xdf\xe4\xdf\xe2\xe0\xdf\xe6\xe2\xdd\xe3\xe8\xe6\xe3\xe4\xe7\xd4\xd5\xe3\xcf\xd3\xe1\xea\xea\xe9\xe6\xc3\xc4\xcd\xd4\xe1\xdc\xdd\xd8\xe4\xde\xe8\xe5\xdb\xed\xe5\xe4\xe9\xe5\xe4\xe6\xe0\xdf\xda\xdb\xdc\xd6\xcb\xdc\xe2\xdf\xde\xde\xcc\xc7\xc1\xc9\xd8\xd5\xd2\xd2\xde\xd8\xe4\xde\xcb\xd8\xe1\xe3\xe7\xe1\xdc\xe1\xdc\xd9\xd4\xd7\xd7\xdc\xdd\xde\xe0\xdd\xde\xe2\xbe\xba\xb3\xbc\xcb\xcd\xc5\xcb\xd3\xc9\xc8\xca\xc1\xbd\xc8\xd0\xd9\xdb\xd7\xdc\xde\xdf\xdc\xd5\xd5\xe0\xe3\xe2\xe3\xe3\xe6\xe5\xca\xc5\xc9\xce\xd1\xd2\xd1\xd3\xd1\xca\xc0\xc3\xca\xc6\xca\xd3\xd9\xdc\xe1\xdc\xdb\xdf\xdf\xda\xd5\xdd\xe1\xe1\xdf\xe0\xde\xe8\xd4\xd4\xda\xd9\xd8\xd8\xda\xd7\xd2\xcb\xca\xd0\xd3\xda\xe0\xe0\xe3\xda\xe3\xe3\xe6\xe9\xe3\xd7\xd7\xd9\xd9\xdb\xda\xd3\xcd\xd9\xcf\xd0\xd6\xd3\xd2\xd2\xd2\xcb\xbf\xc4\xbc\xc4\xc1\xc6\xcb\xc9\xd1\xd4\xd9\xd3\xd6\xd7\xd7\xd2\xd9\xd7\xd8\xda\xd5\xd5\xd9\xd5\xd5\xcd\xd4\xd5\xd5\xda\xd6\xc9\xba\xbb\xa0\xb2\xbb\xbb\xbd\xbb\xc1\xcf\xd5\xce\xc8\xcc\xd8\xd1\xd1\xd1\xd6\xd8\xdb\xdc\xdc\xd9\xcb\xc5\xcb\xc9\xc5\xcb\xcc\xc8\xbe\xb9\x9f\xac\xbd\xc0\xc7\xcc\xd0\xd1\xd5\xd6\xd1\xd2\xd6\xd4\xd5\xd8\xda\xdc\xdb\xda\xd9\xd7\xbf\xbd\xbe\xbb\xbb\xc0\xbd\xbc\xbc\xc0\xa6\xa9\xc7\xc5\xcb\xcc\xcb\xd0\xd2\xd5\xd3\xd3\xd3\xd4\xd4\xd7\xd7\xd8\xd7\xd6\xd5\xd3\xc3\xc3\xc4\xc4\xc6\xc5\xc0\xc0\xc3\xc5\xa8\xa1\xc5\xc8\xd1\xc0\x9b\xcc\xd0\xcf\xcf\xd2\xd3\xd2\xd1\xd3\xd5\xd3\xd4\xd4\xc8\xc3\x9c\x87\x82\xa5\xa5\xa4\x9f\x9f\xa3\xa8\x99\x94\xa7\xaa\x9bxm\x8e\x8a\xb4\xc0\xbe\xb7\xbf\xb0\x81\xa1\xc1\xba\xb3sXh_biehccinv\x8a\x8c\x86i]\x87\x8e\x81\x80~ynthK_ug[;1~\x85\x8e\x87\x80}tqqqt\x7f\x9e\xa4\x9a\x96\x98\x99\xa6\x82kgdb[`a_[V\\`\x83\x90\x88\x85\x87\x89\x89\x8c\x8b\x88\x88\x87\x9f\xa4\xa1\x9d\x95\x89~w\x89\x83\x82\x83\x81\x80\x80\x7f\x83\x85\x85\x84\x86\x7fz\x88\x82\x7f|{vq\x83\x8e\x8f\x96\x90\x8c\x83\x85xh\x8c\x8b\x87\x84\x85\x85\x83\x83\x88\x86~}\x96\x94\x97\x99\x92\x7fvgN=Oe```^n\x82yx\x82{{~\x7f\x7f\x83\x89\x8b\x87\x85x\xa7\xa6\xa9\xa4\xa4\xa0\xa2\xa1\x97\x8d\x7fXVzli|~\x84so\x8b\x8d\x8a\x8a\x8b\x88\x88\x86\x84\x89x\xa3\x9f\xa2\xa6\xa6\xa6\xa6\xa7\xaa\xac\xb4bQ\xa9\xa3\xa1\x9ax\xaat]\x9f\x9e\x9b\x98\x96\x93\x92\x8c\x88\x8ap\x92\x8e\x8a\x8b\x88\x84|yyxyH5PLTx\x84\xa0qd\xab\xa7\xa9\xa9\xa9\xa7\xa5\x9f\x9d\x9c{\xb3\xb1\xb1\xae\xaa\xa6\xa4\x8bWIDDJZlx\x82\x88\x89\x83\x81\x8f\x90\x93\x93\x95\x96\x8c\x8c\xac\xads\xab\x9e\x99\x94\x94\x98\x91kS`u\x8d\x9c\xac\xb8\xb7\xb3\xb0\xaf\xaf\xad\xaa\xa9\xa9'

     with tf.Session() as sess :
         
        print( sess.run( tf.decode_raw(a,  tf.uint8)))

         
#DecodeRaw()         
readCifar10File()
 